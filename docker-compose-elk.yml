networks:
  shared_elk_network:
    name: shared_elk_network
    driver: bridge

volumes:
  elasticsearch_data:
    driver: local
  logstash_data: # For persistent queue if configured
    driver: local
  logging_redis_data:
    driver: local

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # For local development only
      - ES_JAVA_OPTS=-Xms1g -Xmx1g # Limit resources
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300" # Optional: for internode communication if not single-node
    networks:
      - shared_elk_network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 5s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.1
    container_name: logstash
    environment:
      - LS_JAVA_OPTS=-Xms512m -Xmx512m # Limit resources
    volumes:
      - ./elk/logstash/pipeline/logstash.conf:/usr/share/logstash/config/the_only_config.conf:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    command: [ "logstash", "-f", "/usr/share/logstash/config/the_only_config.conf" ]
    networks:
      - shared_elk_network
    depends_on:
      elasticsearch:
        condition: service_healthy
      logging-redis:
        condition: service_started

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      # - NODE_OPTIONS=--max-old-space-size=512 # Limit resources if needed
    ports:
      - "5601:5601"
    networks:
      - shared_elk_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601/api/status | grep -q 'HTTP/1.1 200 OK'"]
      interval: 10s
      timeout: 5s
      retries: 5

  logging-redis:
    image: redis:7-alpine
    container_name: logging-redis
    command: redis-server --save 60 1 --loglevel warning # Persistence example
    volumes:
      - logging_redis_data:/data
    ports:
      - "6380:6379" # Expose on different host port to avoid conflict with app-redis if on same host outside Docker
    networks:
      - shared_elk_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5 