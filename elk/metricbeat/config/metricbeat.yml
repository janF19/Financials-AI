metricbeat.config.modules:
  path: ${path.config}/modules.d/*.yml
  reload.enabled: false

# Autodiscover Docker containers for monitoring (e.g., specific modules via hints)
# metricbeat.autodiscover:
#  providers:
#    - type: docker
#      hints.enabled: true

metricbeat.modules:
- module: system
  period: 10s
  metricsets:
    - cpu
    - load
    - memory
    - network
    - process
    - process_summary
    # - filesystem # Can be noisy, enable if needed
    # - fsstat
  process.include_top_n:
    by_cpu: 5
    by_memory: 5

- module: docker
  metricsets:
    - container
    - cpu
    - diskio
    - healthcheck
    - info
    - memory
    - network
  hosts: ["unix:///var/run/docker.sock"]
  period: 10s
  # Add labels or filters if you want to include/exclude specific containers
  # processors:
  #  - add_docker_metadata: ~

# Module for your application's Redis instance
# This is configured via command line in docker-compose-app.yml for simplicity
# to target the 'redis' service name.
# If defined here, ensure 'redis:6379' is resolvable.
- module: redis
  metricsets: ["info", "keyspace"] # "command" can be verbose
  period: 30s
  hosts: ["redis:6379"] # This targets your APP Redis (app-redis)
  # password: "your-app-redis-password" # If your app redis has a password

# Optional: If your backend exposes Prometheus metrics
# - module: prometheus
#   metricsets: ["collector"]
#   period: 10s
#   hosts: ["backend:8000"] # Assuming backend is resolvable
#   metrics_path: /metrics
#   # For Prometheus, you might need to ensure Metricbeat is on the same network as 'backend'
#   # and can resolve 'backend'. It is, via app-network.

# Output directly to Elasticsearch
# This is also configured via command line in docker-compose-app.yml for simplicity.
# output.elasticsearch:
#   hosts: ["elasticsearch:9200"] # This targets Elasticsearch on elk-network
  # username: "elastic"
  # password: "yourpassword"

logging.level: info
# logging.to_files: false
# logging.to_stderr: true 